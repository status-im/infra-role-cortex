---
auth_enabled: false

# ---------------------- Limits ---------------------------
limits:
  ingestion_rate: 1000000
  ingestion_burst_size: 2000000
  max_series_per_metric: 100000
  # Helps with big purger queries
  max_chunks_per_query: 7000000

# ---------------------- MemberList -----------------------
memberlist:
  node_name: '{{ hostname }}'

# ---------------------- API ------------------------------
api:
  response_compression_enabled: true

# ---------------------- Server ---------------------------
server:
  http_listen_address: '0.0.0.0'
  http_listen_port: {{ cortex_listen_port | mandatory }}
  grpc_listen_address: '0.0.0.0'
  grpc_listen_port: {{ cortex_grpc_port | mandatory }}
  log_level: '{{ cortex_log_level }}'

  # Big queries need bigger message size
  grpc_server_max_recv_msg_size: 104857600
  grpc_server_max_send_msg_size: 16777216
  grpc_server_max_concurrent_streams: 0

  # Avoid RPC timeouts
  grpc_server_keepalive_timeout: 120s
  grpc_server_min_time_between_pings: 5s
  grpc_server_ping_without_stream_allowed: true

# ---------------------- Storage --------------------------
storage:
  engine: 'chunks'
  cassandra:
    addresses: '{{ cortex_cassandra_nodes | join(',') | trim }}'
    port: {{ cortex_cassandra_port | mandatory }}
    SSL: false
    auth: false
    keyspace: '{{ cortex_storage_keyspace_name }}'
    consistency: '{{ cortex_storage_consistency }}'
    replication_factor: {{ cortex_storage_replication_factor }}
    timeout: '20s'
    max_retries: 2
    num_connections: 2
  index_queries_cache_config:
    memcached:
      batch_size: 16384
      parallelism: 10
    memcached_client:
      addresses: '{{ cortex_memcached_addresses | join(',') }}'
      timeout: '500ms'

  # Required by purger module
  delete_store:
    store: 'cassandra'
    requests_table_name: 'delete_requests'

# ---------------------- Chunks ---------------------------
chunk_store:
  chunk_cache_config:
    memcached:
      batch_size: 16384
      parallelism: 10
    memcached_client:
      addresses: '{{ cortex_memcached_addresses | join(',') }}'
      timeout: '500ms'
  write_dedupe_cache_config:
    memcached:
      batch_size: 16384
      parallelism: 10
    memcached_client:
      addresses: '{{ cortex_memcached_addresses | join(',') }}'
      timeout: '500ms'

# ---------------------- Querier --------------------------
querier:
  max_samples: 1000000000
  max_concurrent: 100
  timeout: '2m'
  # Should be same as `ingester.max_chunk_age`.
  query_store_after: '2h'

# ---------------------- Frontend Worker ------------------
frontend_worker:
  frontend_address: '{{ cortex_query_frontend_addr }}:{{ cortex_query_frontend_port }}'
  match_max_concurrent: true

# ---------------------- Table Manager --------------------
table_manager:
  retention_deletes_enabled: true
  retention_period: '{{ cortex_storage_retention_period }}'

# ---------------------- Configs --------------------------
configs:
  database:
    # TODO use postgres
    uri: 'memory://'

# ---------------------- Distributor ----------------------
distributor:
  # Low timeout causes ingester `context deadline exceeded`.
  # Should be the same as `querier.query_store_after`.
  remote_timeout: '4s'

# ---------------------- Ingester -------------------------
ingester:
  spread_flushes: true
  flush_period: '1m'
  retain_period: '5m'
  # Lowers amount of RAM used at cost of storage I/O.
  # Should be same as `querier.query_store_after`.
  max_chunk_age: '2h'
  lifecycler:
    interface_names: {{ cortex_listen_interfaces | to_yaml }}
    tokens_file_path: '{{ cortex_wal_dir }}/tokens'

# ---------------------- Compactor ------------------------
compactor:
  # Necessary only the first time 1.7.0 version starts.
  block_deletion_marks_migration_enabled: false

# ---------------------- Purger ---------------------------
purger:
  enable: true
  num_workers: 2
  object_store_type: 'inmemory'
  delete_request_cancel_period: '5m'
