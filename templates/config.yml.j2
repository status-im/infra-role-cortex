---
target: '{{ cortex_target_modules | join(",") }}'
auth_enabled: false

# ---------------------- Configs --------------------------
configs:
  database:
    uri: 'memory://'

# ---------------------- Limits ---------------------------
limits:
  ingestion_rate: 1000000
  ingestion_burst_size: 2000000
  # Helps with big purger queries.
  max_chunks_per_query: 7000000
  # Limit impact from high cardinality.
  cardinality_limit: 30000
  max_series_per_metric: 30000
  max_series_per_user: 5000000
  max_label_names_per_series: 30
  # Delete blocks containing samples older than this.
  compactor_blocks_retention_period: {{ cortex_blocks_storage_retention }}

# ---------------------- Server ---------------------------
server:
  http_listen_address: '0.0.0.0'
  http_listen_port: {{ cortex_listen_port | mandatory }}
  grpc_listen_address: '0.0.0.0'
  grpc_listen_port: {{ cortex_grpc_port | mandatory }}
  log_level: '{{ cortex_log_level }}'

  # Big queries need bigger message size.
  grpc_server_max_recv_msg_size: 104857600
  grpc_server_max_send_msg_size: 16777216
  # Bump gRPC concurrency to avoid delays.
  grpc_server_max_concurrent_streams: 1000

# ---------------------- Storage --------------------------
storage:
  engine: 'blocks'

{% if 'ingester' in cortex_target_modules or 'store-gateway' in cortex_target_modules or ['all'] == cortex_target_modules %}
blocks_storage:
  backend: 's3'
  s3:
    endpoint: '{{ cortex_blocks_storage_endpoint }}'
    bucket_name: '{{ cortex_blocks_storage_bucket | mandatory }}'
    access_key_id: '{{ cortex_blocks_storage_key_id | mandatory }}'
    secret_access_key: '{{ cortex_blocks_storage_secret | mandatory }}'
  bucket_store:
    index_cache:
      backend: 'memcached'
      memcached:
        addresses: '{{ cortex_memcached_addresses | join(',') }}'
        timeout: '500ms'
    chunks_cache:
      backend: 'memcached'
      memcached:
        addresses: '{{ cortex_memcached_addresses | join(',') }}'
        timeout: '500ms'
    metadata_cache:
      backend: 'memcached'
      memcached:
        addresses: '{{ cortex_memcached_addresses | join(',') }}'
        timeout: '500ms'

{% endif %}
{% if 'querier' in cortex_target_modules or ['all'] == cortex_target_modules %}
# ---------------------- Querier --------------------------
querier:
  max_samples: 1000000000
  max_concurrent: 100
  timeout: '2m'
  query_store_after: '2h'

# ---------------------- Frontend Worker ------------------
frontend_worker:
  frontend_address: '{{ cortex_query_frontend_addr }}:{{ cortex_query_frontend_port }}'
  match_max_concurrent: true

{% endif %}
{% if 'querier' in cortex_target_modules or ['all'] == cortex_target_modules %}
# ---------------------- Store Gateway --------------------
store_gateway:
  sharding_enabled: true

{% endif %}
{% if 'query-frontend' in cortex_target_modules or ['all'] == cortex_target_modules %}
# ---------------------- Query Frontend -------------------
frontend:
  max_outstanding_per_tenant: 400
  log_queries_longer_than: 5s
  query_stats_enabled: true
  grpc_client_config:
    max_recv_msg_size: 104857600
    max_send_msg_size: 16777216

# ---------------------- Querier --------------------------
query_range:
  split_queries_by_interval: '24h'
  align_queries_with_step: true
  cache_results: true
  results_cache:
    cache:
      memcached:
        batch_size: 16384
        parallelism: 10
      memcached_client:
        addresses: '{{ cortex_memcached_addresses | join(',') }}'
        timeout: '500ms'

{% endif %}
{% if 'distributor' in cortex_target_modules or ['all'] == cortex_target_modules %}
# ---------------------- Distributor ----------------------
distributor:
  # Low timeout causes ingester `context deadline exceeded`.
  remote_timeout: '30s'

  ring:
{% filter indent(4, True) %}{% include "kvstore.conf.j2" %}{% endfilter %}

{% endif %}
{% if 'ingester' in cortex_target_modules or ['all'] == cortex_target_modules %}
# ---------------------- Ingester -------------------------
ingester:
  lifecycler:
    tokens_file_path: '{{ cortex_wal_dir }}/tokens'
    interface_names: {{ cortex_listen_interfaces | to_yaml }}
    ring:
{% filter indent(6, True) %}{% include "kvstore.conf.j2" %}{% endfilter %}

{% endif %}
{% if 'purger' in cortex_target_modules or ['all'] == cortex_target_modules %}
# ---------------------- Purger ---------------------------
purger:
  enable: true
  num_workers: 2
  object_store_type: 'inmemory'
  delete_request_cancel_period: '5m'
{% endif %}
